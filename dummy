it("Sorts by Price: ascending", () => {
  const sortedAscTestData = tesdData1.config.extraSettings.rowData.sort(
    (a, b) => a.price - b.price
  );
  agGridReact.columnApi.applyColumnState({
    state: [{ colId: "price", sort: "asc" }],
    defaultState: { sort: null },
  });
  agGridReact.api.forEachNodeAfterFilterAndSort((node, ind) => {
    expect(node.data.price).toEqual(sortedAscTestData[ind].price);
  });
  
  });

it("Sorts by Price: descending", () => {
  const sortedDescTestData = tesdData1.config.extraSettings.rowData
    .sort((a, b) => a.price - b.price)
    .reverse();
  agGridReact.columnApi.applyColumnState({
    state: [{ colId: "price", sort: "desc" }],
    defaultState: { sort: null },
  });

  agGridReact.api.forEachNodeAfterFilterAndSort((node, ind) => {
    expect(node.data.price).toEqual(sortedDescTestData[ind].price);
  });
  
  it("should have sorting when sort is enabled", () => {
  expect(
    component.render().find(".ag-header-cell-sorted-none").length
  ).toBeGreaterThanOrEqual(1);
});

it("should have filter when filtering is enabled", () => {
  expect(
    component.render().find(".ag-filter-wrapper").length
  ).toBeGreaterThanOrEqual(1);
});

it("should have pagination when pagination is enabled", () => {
  expect(
    component.render().find(".ag-icon-filter").length
  ).toBeGreaterThanOrEqual(1);
});





...................

it("should have sorting when sort is enabled", () => {
  expect(
    component.render().find(".ag-header-cell-sorted-none").length
  ).toBeGreaterThanOrEqual(1);
});

it("should have filter when filtering is enabled", () => {
  expect(
    component.render().find(".ag-filter-icon").length
  ).toBeGreaterThanOrEqual(1);
});

it("should have pagination when pagination is enabled", () => {
  expect(
    component.render().find(".ag-paging-number").first().text()
  ).toEqual("1");
});

it("should have pages depending upon page size defined", () => {
  expect(
    component.render().find(".ag-paging-number").last().text()
  ).toEqual("3");
});


export const tesdData1 = {
  config: {
    extraSettings: {
      rowData: [
        {
          athlete: "Michael Phelps",
          age: 23,
          country: "United States",
          year: 2008,
          date: "2019/12/1",
          sport: "Swimming",
          gold: 8,
          silver: 0,
          bronze: 0,
          total: 8,
        },
        {
          athlete: "Michael Phelps",
          age: 19,
          country: "United States",
          year: 2004,
          date: "2020/12/1",
          sport: "Swimming",
          gold: 6,
          silver: 0,
          bronze: 2,
          total: 8,
        },
        {
          athlete: "Michael Phelps",
          age: 27,
          country: "United States",
          year: 2012,
          date: "2021/12/1",
          sport: "Swimming",
          gold: 4,
          silver: 2,
          bronze: 0,
          total: 6,
        },
      ],
      columnDefs: [
        { field: "athlete" },
        {
          field: "date",
          filter: "agDateColumnFilter",
          sortable: true,
          // valueFormatter:  (params) => {
          //   console.log(new Date(params.value),params);
          //   return params.data.date
          //   // return new Date(params.value)
          // },
          // valueGetter: (params) => {
          //   console.log(new Date(params.data.date),params.data);
          //   // return params.data.date
          //   return new Date(params.data.date);
          // },
          valueGetter: "new Date(data.date)",
          valueFormatter: "data.date",
        },
        { field: "total", filter: false },
      ],
      gridOption: {
        minHeight: "",
        pagination: true,
      },
      // treeData: false,
      // hierarchy: "orgHierarchy",
      // groupColumnDef: {
      //   headerName: "check",
      // },
    },
  },
};





import { Editor } from '@tinymce/tinymce-react'

// TinyMCE so the global var exists
// eslint-disable-next-line no-unused-vars
import 'tinymce/tinymce'
// DOM model
import 'tinymce/models/dom/model'
// Theme
import 'tinymce/themes/silver'
// Toolbar icons
import 'tinymce/icons/default'
// Editor styles
import 'tinymce/skins/ui/oxide/skin.min.css'

// importing the plugin js.
// if you use a plugin that is not listed here the editor will fail to load
import 'tinymce/plugins/advlist'
import 'tinymce/plugins/anchor'
import 'tinymce/plugins/autolink'
import 'tinymce/plugins/autoresize'
import 'tinymce/plugins/autosave'
import 'tinymce/plugins/charmap'
import 'tinymce/plugins/code'
import 'tinymce/plugins/codesample'
import 'tinymce/plugins/directionality'
import 'tinymce/plugins/emoticons'
import 'tinymce/plugins/fullscreen'
import 'tinymce/plugins/help'
import 'tinymce/plugins/image'
import 'tinymce/plugins/importcss'
import 'tinymce/plugins/insertdatetime'
import 'tinymce/plugins/link'
import 'tinymce/plugins/lists'
import 'tinymce/plugins/media'
import 'tinymce/plugins/nonbreaking'
import 'tinymce/plugins/pagebreak'
import 'tinymce/plugins/preview'
import 'tinymce/plugins/quickbars'
import 'tinymce/plugins/save'
import 'tinymce/plugins/searchreplace'
import 'tinymce/plugins/table'
import 'tinymce/plugins/template'
import 'tinymce/plugins/visualblocks'
import 'tinymce/plugins/visualchars'
import 'tinymce/plugins/wordcount'

// importing plugin resources
import 'tinymce/plugins/emoticons/js/emojis'

// Content styles, including inline UI like fake cursors
/* eslint import/no-webpack-loader-syntax: off */

export default function BundledEditor(props) {
  const { init, ...rest } = props
  // note that skin and content_css is disabled to avoid the normal
  // loading process and is instead loaded as a string via content_style
  return (
    <Editor
      init={{
        ...init,
        skin: false,
        content_css: false,
      }}
      {...rest}
    />
  )
}





import React, { useRef } from 'react'
import BundledEditor from './BundledEditor'

export default function App() {
  const editorRef = useRef(null)
  const log = () => {
    if (editorRef.current) {
      console.log(editorRef.current.getContent())
    }
  }
  return (
    <>
      <BundledEditor
        initialValue="<p>This is the initial content of the editor.</p>"
        init={{
          height: 500,
          menubar: false,
          plugins: [
            'advlist',
            'anchor',
            'autolink',
            'help',
            'image',
            'link',
            'lists',
            'searchreplace',
            'table',
            'wordcount',
          ],
          toolbar:
            'undo redo | blocks | ' +
            'bold italic forecolor | alignleft aligncenter ' +
            'alignright alignjustify | bullist numlist outdent indent | ' +
            'removeformat | help',
          content_style:
            'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
        }}
      />
      <button onClick={log}>Log editor content</button>
    </>
  )
}


@tinymce/tinymce-react "raw-loader  tinymce"
